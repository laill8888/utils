### 高性能MySQL

mysql足够灵活，适应高要求的环境，例如web类应用，嵌入到应用程序中，也支持
数据仓库、内容索引和部署软件、高可用的冗余系统、在线事务处理系统(OLTP)等。

#### 逻辑架构

第一层：连接处理、授权认证和安全

第二层：核心服务功能，包括查询解析、分析、优化、缓存以及所有的内置函数。
存储过程、函数和视图等。

第三层：存储引擎

#### 并发控制

共享锁(读锁)：互不阻塞

排它锁(写锁)：阻塞其他的写锁和读锁。

锁粒度：尽量锁定少的数据。

* 表锁：MySQL最基本的锁策略，开销最小的策略。锁定整张表，用户获得读锁，其他
用户只能等待该用户锁的释放。只有在没有读锁时，其他用户才可以获得读锁。
写锁的优先级高级读锁。
* 行级锁：最大程度的支持并发处理。InnoDB、XtraDB存储引擎实现了行级锁。
只在存储引擎层实现，在服务层则没有实现。

#### 事务

ACID特性：原子性、一致性、隔离性、持久性

事务由存储引擎实现。服务器层不管理事务。

隔离性：SQL标准定义了四种隔离级别。
* read uncommitted：未提交读,事务中的修改，未提交对其他事务也是可见的
，这也被称为脏读。一般在实际应用中很少使用。
* read committed:提交读，大多数的数据库默认的隔离级别。但MySQL不是。一个事务
开始到提交之前，对其他事务是不可见的。这个级别也叫做不可重复读。
* repeatable read:可重复读，mysql默认级别。
解决了脏读的问题，但依然存在幻读的问题。
* serializable:可串行化，解决幻读问题，只有非常需要保证数据一致性
和没有并发的场景下才会使用这级别。

死锁：两个事务或者多个事务在同一资源上相互占用，并请求锁定对方占用的资源。
InnoDB将持有最少行排他锁的事务进行回滚。

事务日志：存储引擎在修改表的数据时只需要修改其内存拷贝，再把修改行为记录持久
化到事务日志中，然后慢慢的在后台修改到数据库中。帮助事务的效率。

mysql中的事务：MySQL中事务默认是自动提交。

InnoDB存储引擎：采用两阶段锁定协议。锁定分为隐式锁定(存储引擎自动随时加锁)和显示锁定。显示锁定比如
select * from table_name for update;
select * lock in share mode;

#### MySQL存储引擎

#### MySQL基准测试

数据库的基准测试是对数据库的性能指标进行定量的、可复现的、可对比的测试。

基准测试vs压力测试
基准测试可以理解为针对系统的一种压力测试。
但基准测试不关心业务逻辑，更加简单、直接、易于测试，数据可以由工具生成，不要求真实；而压力测试一般考虑业务逻辑(如购物车业务)，要求真实的数据。

#### 基准测试的策略    

主要有对整个系统的整体测试，另外单独测试MySQL两种策略。

#### 剖析MySQL查询
性能剖析工具newrelic.

慢日志查询分析工具：pt-query-digest

#### schema与数据类型优化

##### 选择优化的数据类型
**选择正确的数据类型对于获得高性能至关重要**。

**基本原则**

 * 更小的通常更好
 
    尽量使用可以正确存储数据的最小数据类型。
    
 * 简单就好
    
    比如整型比字符串操作代价更低。使用MySQL内建的类型存储日期和时间。
    使用整型存储IP地址等。
 * 尽量避免null
 
    通常情况下，尽量设计not null.一般null比not null更难优化。
    
 **timestamp vs datetime**
 
 timestamp储存占用4个字节

 datetime储存占用8个字节
 
 对于TIMESTAMP，它把客户端插入的时间从当前时区转化为UTC（世界标准时间）进行存储。查询时，将其又转化为客户端当前时区进行返回。

 而对于DATETIME，不做任何改变，基本上是原样输入和输出。
 
 timestamp所能存储的时间范围为：'1970-01-01 00:00:01.000000' 到 '2038-01-19 03:14:07.999999'。

 datetime所能存储的时间范围为：'1000-01-01 00:00:00.000000' 到 '9999-12-31 23:59:59.999999'。

##### 整数类型
 
 MySQL可以为整数类型指定宽度，例如int(11),对大多数的应用这是没有意义的。存储和计算来说
 int(1) 和int(11)是一样的，不会限制值的合法范围，仅仅是在一些MySQL客户端交互工具
 用来显示字符的个数。

##### 实数类型

DECIMAL 因为需要额外的存储和计算开销，尽量只有对小数部分精确计算时才使用decimal。
        可以使用bigint代替decimal或者将整数部分和小数部分分别进行存储。
        
##### 字符串类型

* varchar vs char

  适合varchar的情况：
  
  1、字符串列最大长度比平均长度大很多的
  2、列的更新很少
  3、使用了utf-8字符集
  
  适合char
  
  1、存储很短的字符串或者字符长度接近的数据，如密码MD5
  2、经常变更的数据
  
* blob vs text

    为存储很大数据而设计的字符串数据类型。当值太大时，InnoDB会使用专门的外部存储区域
    来进行存储，在行内存储1~4个字节存储一个指针，该指针指向外部存储区域的值。MySQL对
    这两种类型仅对max_sort_length字节排序，或者使用order by 
    sustring(column,length)。MySQL也不能对这两种类型的全部长度的字符进行索引。

    不同点：<br/>
    1、
      blob 采用二进制存储
      text 采用字符存储
    2、
      blob没有排序规则和字符集
      text有排序规则和字符集
      
##### 枚举类型
对于值固定不变的，可以采用枚举类型。枚举类型的排序是按照枚举值对应的整数进行的排序，
不是使用枚举值字符的顺序进行排序的。

##### 日期和时间类型

* datetime vs timestamp
datetime 可以表示1001到9999年的范围，精度为秒。
timestamp 表示从1970.1.1以来的秒数。只能表示1970到2038年。MySQL提供了
FROM_UNIXTIME()函数将时间戳转换成日期，UNIX_TIMESTAMP()函数将日期转换成时间戳。
应该尽量使用timestamp，因为timestamp在存储空间效率更高。

##### 标识列主键数据类型的选择
整数是主键最好的选择。应该避免使用字符串类型，字符串类型占用较大的空间且通常比数字慢。
如果存储uuid值应该将-去除或者更好的做法是使用UNHEX()函数转换成16字节的数字，并且使用
binary(16)存储。检索时可以使用HEX()函数格式化为十六进制格式。

##### 特殊的数据类型
例如存储IP，应该存储为整数类型。MySQL提供了INET_ATON()(转换为整数)和INET_NTOA()
(转换成IP)函数相互转换。


#### 范式和反范式
范式优点：
* 更新操作通常比反范式更快。
* 很少或者没有重复数据。
* 范式化的表通常更小，可以过呢更好的放在内存里，所以执行操作会更快。
* 更少需要group by、distinct操作。

范式的缺点：
* 通常需要关联，这不但代价昂贵而且可能是一些索引策略失效。
 
 
### 创建高性能的索引
* 如果索引包含多个列，则列的顺序非常重要，因为MySQL只能高效使用索引的最左前缀列。

#### 索引类型

* B-tree索引：对索引列采用顺序组织存储的，所以B-tree很适合查找范围的数据。
            B-tree索引适合全键值、键值范围、最左前缀键值。索引支持order by
            group by操作。
            
    B-tree索引的限制：
    1、如果不是按照索引的最左列开始查找，则无法使用索引。
    2、不能跳过索引中的列。
    3、如果查询中有某个列的范围查询，则其右边的所有列都无法使用索引优化查找。

* 哈希索引：包含哈希值和行指针。基于哈希表实现，只有精确匹配索引所有列的查询才有效。
     哈希索引实现原理：对于每行数据，存储引擎都会对所有索引列计算一个哈希码，哈希码
     是一个较小的值，并且不同的键值计算出来的哈希码也是不同的，哈希索引将所有的哈希码
     存储在索引中，同时在哈希表中存储指向每行数据的指针。
     索引自身只需存储哈希值，所以索引的结构十分紧凑，这也让哈希索引查询速度非常快。
    
     哈希索引限制：
     1、哈希索引只存储哈希值和行指针，而不存储行的值，因此不能使用索引中的值来避免读取行。
     2、哈希索引不是按照索引值顺序存储的，所以哈希索引无法用于排序。
     3、不支持索引中部分列匹配查找。
     4、只支持等值比较查找。
     5、哈希索引冲突很多的话，需要额昂的维护成本。
     
* 空间数据索引（R-tree）


* 全文索引:查找文中的关键词。

* 索引的优点
1、大大减少了服务器需要扫描的数据量。
2、可以帮助服务器避免排序和临时表。
3、可以将随机I/O变成顺序I/O。

#### 建立索引的策略
* 独立的列

尽可能将索引列放置where条件中的一侧。MySQL无法解析索引列参与运算，如where age+2<13,
则MySQL无法使用age列上的索引。也不能参与MySQL函数运算。

* 前缀索引和索引选择性

对于索引很长的字符列，通常可以索引开始部分字段，大大节省索引空间，但是这样会影响
索引的选择性,前缀索引的前缀选择性应该无限接近完整列时选择性。
计算前缀索引的方法：
1、计算完整列的选择性
select count(distinct 列名)/count(0) from table_name;
2、select count(distinct left(列名,3))/count(0) from table_name;
两个值接近时，我们认为此时的前缀索引的选择性就是可用的。如果数据分布及其不均匀，
这种算法也是不准确的。

对于BLOB、text或者很长的varchar类型的列，必须使用前缀索引，MySQL不允许索引这些
类型的列完整长度。

创建前缀索引语法：
alter table table_name add key (列名(7));

前缀索引限制：
1、MySQL无法使用前缀索引做order by、group by。
2、无法使用前缀索引做覆盖扫描。

* 多列索引
在where条件中存在多个列时，在每一列上独立的建立索引，大多数情况下，这些单独的索引
对查询性能没有多大的帮助。

* 选择合适的索引列顺序
将选择性最高的列放到索引最前列，这种建议可能在某些场景下有用，通常不如避免随机I/O和
排序重要。

* 聚簇索引

* 覆盖索引
如果一个索引包含或者说覆盖所有查询字段的值，该索引被称为覆盖索引。



  
  

